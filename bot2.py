import os
import json
import asyncio
from aiohttp import web
import logging
from typing import List
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from chaysub import ChaySub
from utils import (
    load_allowed_users, add_allowed_user, countdown, remove_allowed_user,
    getBalanceInfo, addBalance, updateBalance
)

# ================== ENV & INIT ==================
load_dotenv()

TOKEN = os.getenv("BOT1_TOKEN")
CHAYSUB_TOKEN = os.getenv("CHAYSUB_TOKEN")
_admin_env = os.getenv("ADMIN_ID")
try:
    ADMIN_ID = int(_admin_env) if _admin_env else None
except ValueError:
    ADMIN_ID = None

if not TOKEN:
    raise RuntimeError("Thi·∫øu BOT1_TOKEN trong .env")
if not CHAYSUB_TOKEN:
    raise RuntimeError("Thi·∫øu CHAYSUB_TOKEN trong .env")
if ADMIN_ID is None:
    raise RuntimeError("Thi·∫øu ho·∫∑c sai ADMIN_ID trong .env (ph·∫£i l√† s·ªë nguy√™n)")

# logging & error handler
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

chaysub = ChaySub(CHAYSUB_TOKEN)


# ================== HELPERS ==================
def _is_allowed(user_id: int) -> bool:
    return user_id in load_allowed_users()

async def _guard_allow(update: Update) -> bool:
    uid = update.effective_user.id
    if not _is_allowed(uid):
        # n·∫øu admin th√¨ lu√¥n cho qua
        if uid == ADMIN_ID:
            return True
        if update.effective_message:
            await update.effective_message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y.")
        return False
    return True

async def _send_long_text(update_or_ctx, text: str):
    """G·ª≠i text d√†i b·∫±ng c√°ch c·∫Øt nh·ªè tr√°nh 4096 k√Ω t·ª± c·ªßa Telegram."""
    # ∆∞u ti√™n g·ª≠i qua message hi·ªán c√≥
    message = None
    if isinstance(update_or_ctx, Update):
        message = update_or_ctx.effective_message
    else:
        # context d√πng trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p
        message = update_or_ctx

    MAX = 3900
    if len(text) <= MAX:
        await message.reply_text(text)
        return
    # chunk theo d√≤ng
    lines = text.splitlines()
    buf, size = [], 0
    for ln in lines:
        if size + len(ln) + 1 > MAX:
            await message.reply_text("\n".join(buf))
            buf, size = [], 0
        buf.append(ln)
        size += len(ln) + 1
    if buf:
        await message.reply_text("\n".join(buf))

async def _show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.effective_message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y.")
        return
    status, result = chaysub.getBalance()
    balance = result.get("balance", "NaN") if isinstance(result, dict) else "NaN"
    currency = result.get("currency", "VNƒê") if isinstance(result, dict) else "VNƒê"
    keyboard = [
        [InlineKeyboardButton("Th√™m ng∆∞·ªùi d√πng", callback_data='add_user')],
        [InlineKeyboardButton("Th√™m s·ªë d∆∞ cho ng∆∞·ªùi d√πng", callback_data='add_balance')],
        [InlineKeyboardButton("Xem ng∆∞·ªùi d√πng", callback_data='view_users')],
        [InlineKeyboardButton("X√≥a ng∆∞·ªùi d√πng", callback_data='remove_user')],
        [InlineKeyboardButton("Quay l·∫°i", callback_data='start')],
    ]
    await update.effective_message.edit_text(
        text=f"S·ªë d∆∞: {balance} {currency}\nCh·ªçn ch·ª©c nƒÉng b·∫°n mu·ªën:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


# ================== COMMANDS ==================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await _guard_allow(update):
        return
    keyboard = [[InlineKeyboardButton("üöÄ B·∫Øt ƒë·∫ßu", callback_data='start')]]
    await update.message.reply_text(
        'Ch√†o m·ª´ng! Nh·∫•n n√∫t b√™n d∆∞·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu.',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y.")
        return
    # d√πng chung tr√¨nh b√†y menu admin
    # g·ª≠i 1 message r·ªìi edit v·ªÅ sau ƒë·ªÉ ƒë·ªìng nh·∫•t v·ªõi callback
    status, result = chaysub.getBalance()
    balance = result.get("balance", "NaN") if isinstance(result, dict) else "NaN"
    currency = result.get("currency", "VNƒê") if isinstance(result, dict) else "VNƒê"
    keyboard = [
        [InlineKeyboardButton("Th√™m ng∆∞·ªùi d√πng", callback_data='add_user')],
        [InlineKeyboardButton("Th√™m s·ªë d∆∞ cho ng∆∞·ªùi d√πng", callback_data='add_balance')],
        [InlineKeyboardButton("Xem ng∆∞·ªùi d√πng", callback_data='view_users')],
        [InlineKeyboardButton("X√≥a ng∆∞·ªùi d√πng", callback_data='remove_user')],
        [InlineKeyboardButton("Quay l·∫°i", callback_data='start')],
    ]
    await update.message.reply_text(
        text=f"S·ªë d∆∞: {balance} {currency}\nCh·ªçn ch·ª©c nƒÉng b·∫°n mu·ªën:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def getId(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(f"ID c·ªßa b·∫°n l√†: {update.effective_user.id}")

async def getService(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not await _guard_allow(update):
        return
    status, result = chaysub.getServices()
    if status == 200 and isinstance(result, dict):
        services = result.get("data", [])
        if not services:
            await update.message.reply_text("Kh√¥ng c√≥ d·ªãch v·ª• n√†o ƒë∆∞·ª£c tr·∫£ v·ªÅ.")
            return
        # g√≥i g·ªçn th√¥ng tin quan tr·ªçng
        lines: List[str] = []
        for s in services:
            sid = s.get("service")
            name = s.get("name")
            rate = s.get("rate")
            cat  = s.get("category")
            minv = s.get("min")
            maxv = s.get("max")
            lines.append(f"[{sid}] {name} | {cat} | rate: {rate} | min:{minv} max:{maxv}")
        await _send_long_text(update, "Danh s√°ch d·ªãch v·ª•:\n" + "\n".join(lines))
    else:
        msg = result.get('message', 'Kh√¥ng x√°c ƒë·ªãnh') if isinstance(result, dict) else 'Kh√¥ng x√°c ƒë·ªãnh'
        await update.message.reply_text(f"L·ªói khi l·∫•y d·ªãch v·ª•: {msg}")


# ================== CALLBACKS ==================
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    # guard quy·ªÅn cho m·ªçi callback (tr·ª´ admin ‚Äì c√≥ check ri√™ng)
    if query.data != 'admin' and not _is_allowed(update.effective_user.id) and update.effective_user.id != ADMIN_ID:
        await query.edit_message_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y.")
        return

    if query.data == 'start':
        balance = getBalanceInfo(int(update.effective_user.id))
        keyboard = [
            [InlineKeyboardButton("Tiktok", callback_data='tiktok')],
            [InlineKeyboardButton("Facebook", callback_data='facebook')],
        ]
        await query.edit_message_text(
            text=f'S·ªë d∆∞: {balance} VNƒê\nCh·ªçn d·ªãch v·ª• b·∫°n mu·ªën:',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == 'admin':
        # quay l·∫°i menu admin (c√≥ check quy·ªÅn)
        await _show_admin_menu(update, context)

    elif query.data == 'add_user':
        if update.effective_user.id != ADMIN_ID:
            await query.edit_message_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y.")
            return
        await query.edit_message_text(text='Vui l√≤ng g·ª≠i ID ng∆∞·ªùi d√πng m·ªõi d∆∞·ªõi d·∫°ng tin nh·∫Øn:')
        context.user_data['waiting_for_user_id'] = True

    elif query.data == 'view_users':
        if update.effective_user.id != ADMIN_ID:
            await query.edit_message_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y.")
            return
        users = load_allowed_users()
        if not users:
            await query.edit_message_text(text="Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o ƒë∆∞·ª£c ph√©p.")
            return
        user_list = "\n".join([f"{uid} - {getBalanceInfo(uid)} VNƒê" for uid in users])
        await query.edit_message_text(text=f"Ng∆∞·ªùi d√πng ƒë∆∞·ª£c ph√©p:\n{user_list}")

    elif query.data == 'tiktok':
        keyboard = [
            [InlineKeyboardButton("TƒÉng view video", callback_data='tiktok_view')],
            [InlineKeyboardButton("TƒÉng follow", callback_data='tiktok_follow')],
            [InlineKeyboardButton("TƒÉng tim", callback_data='tiktok_heart')],
            [InlineKeyboardButton("Quay l·∫°i", callback_data='start')],
        ]
        await query.edit_message_text(text='Ch·ªçn d·ªãch v·ª• Tiktok:', reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'tiktok_view':
        services = chaysub.getListServiceByCategoryAndName("Tiktok Buff View", "view")
        if not services:
            await query.edit_message_text(text="Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• Tiktok View.")
            return
        keyboard = []
        for service in services:
            service_id = service.get("service")
            rate = service.get("rate")
            minv = service.get("min")
            maxv = service.get("max")
            keyboard.append([InlineKeyboardButton(f"[{service_id}] (Min:{minv}, Max:{maxv}) - {rate}ƒë", callback_data=f'tiktok_view_{service_id}')])
        keyboard.append([InlineKeyboardButton("Quay l·∫°i", callback_data='tiktok')])
        await query.edit_message_text(text='Ch·ªçn lo·∫°i d·ªãch v·ª• mu·ªën buff!', reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith('tiktok_view_'):
        service_id = query.data.split('_')[-1]
        await query.edit_message_text(text='Vui l√≤ng g·ª≠i danh s√°ch link video TikTok b·∫°n mu·ªën buff (m·ªói link 1 d√≤ng):')
        context.user_data['waiting_for_link'] = True
        context.user_data['service_id'] = service_id

    elif query.data == 'tiktok_follow':
        services = chaysub.getListServiceByCategoryAndName("Tiktok Buff Sub", "follow")
        if not services:
            await query.edit_message_text(text="Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• Tiktok Follow.")
            return
        keyboard = []
        for service in services:
            service_id = service.get("service")
            rate = service.get("rate")
            minv = service.get("min")
            maxv = service.get("max")
            keyboard.append([InlineKeyboardButton(f"[{service_id}] (Min:{minv}, Max:{maxv}) - {rate}ƒë", callback_data=f'tiktok_follow_{service_id}')])
        keyboard.append([InlineKeyboardButton("Quay l·∫°i", callback_data='tiktok')])
        await query.edit_message_text(text='Ch·ªçn lo·∫°i d·ªãch v·ª• mu·ªën buff!', reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith('tiktok_follow_'):
        service_id = query.data.split('_')[-1]
        await query.edit_message_text(text='Vui l√≤ng g·ª≠i link profile TikTok b·∫°n mu·ªën buff d∆∞·ªõi d·∫°ng tin nh·∫Øn:')
        context.user_data['waiting_for_link'] = True
        context.user_data['service_id'] = service_id

    elif query.data == 'tiktok_heart':
        services = chaysub.getListServiceByCategoryAndName("Tiktok Buff Like", "like")
        if not services:
            await query.edit_message_text(text="Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• Tiktok Like.")
            return
        keyboard = []
        for service in services:
            service_id = service.get("service")
            rate = service.get("rate")
            minv = service.get("min")
            maxv = service.get("max")
            keyboard.append([InlineKeyboardButton(f"[{service_id}] (Min:{minv}, Max:{maxv}) - {rate}ƒë", callback_data=f'tiktok_heart_{service_id}')])
        keyboard.append([InlineKeyboardButton("Quay l·∫°i", callback_data='tiktok')])
        await query.edit_message_text(text='Ch·ªçn lo·∫°i d·ªãch v·ª• mu·ªën buff!', reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith('tiktok_heart_'):
        service_id = query.data.split('_')[-1]
        await query.edit_message_text(text='Vui l√≤ng g·ª≠i link video TikTok b·∫°n mu·ªën buff d∆∞·ªõi d·∫°ng tin nh·∫Øn:')
        context.user_data['waiting_for_link'] = True
        context.user_data['service_id'] = service_id

    elif query.data == 'facebook':
        await query.edit_message_text("Ch·ª©c nƒÉng n√†y ch∆∞a ho√†n thi·ªán.")

    elif query.data == 'paid':
        object_id = context.user_data.get('object_id')
        quantity = context.user_data.get('quantity')
        if not object_id or not quantity:
            await query.edit_message_text(text="L·ªói: Thi·∫øu th√¥ng tin ƒë∆°n h√†ng.")
            return
        await query.edit_message_text(text="‚úÖ Thanh to√°n th√†nh c√¥ng! ƒêang t·∫°o ƒë∆°n h√†ng...")
        # ch·ªâ update khi ƒë√£ c√≥ new_balance
        if 'new_balance' in context.user_data:
            updateBalance(update.effective_user.id, context.user_data.get('new_balance', 0))
        await buff(update, context, object_id, int(quantity))

    elif query.data == 'cancel':
        await query.edit_message_text(text="‚ùå ƒê∆°n h√†ng ƒë√£ b·ªã h·ªßy.")

    elif query.data == 'remove_user':
        if update.effective_user.id != ADMIN_ID:
            await query.edit_message_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y.")
            return
        users = load_allowed_users()
        if not users:
            await query.edit_message_text(text="Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o ƒë∆∞·ª£c ph√©p.")
            return
        keyboard = [[InlineKeyboardButton(f"X√≥a {uid}", callback_data=f'remove_{uid}')] for uid in users]
        keyboard.append([InlineKeyboardButton("Quay l·∫°i", callback_data='admin')])
        await query.edit_message_text(text='Ch·ªçn ng∆∞·ªùi d√πng b·∫°n mu·ªën x√≥a:', reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith('remove_'):
        if update.effective_user.id != ADMIN_ID:
            await query.edit_message_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y.")
            return
        user_id = int(query.data.split('_')[-1])
        if remove_allowed_user(user_id):
            await query.edit_message_text(text=f"‚úÖ ƒê√£ x√≥a ng∆∞·ªùi d√πng v·ªõi ID: {user_id}")
        else:
            await query.edit_message_text(text=f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: {user_id}")

    elif query.data == 'add_balance':
        if update.effective_user.id != ADMIN_ID:
            await query.edit_message_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y.")
            return
        users = load_allowed_users()
        if not users:
            await query.edit_message_text(text="Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o ƒë∆∞·ª£c ph√©p.")
            return
        keyboard = [[InlineKeyboardButton(f"N·∫°p cho {uid}", callback_data=f'addbal_{uid}')] for uid in users]
        keyboard.append([InlineKeyboardButton("Quay l·∫°i", callback_data='admin')])
        await query.edit_message_text(text='Ch·ªçn ng∆∞·ªùi d√πng b·∫°n mu·ªën n·∫°p s·ªë d∆∞:', reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data.startswith('addbal_'):
        if update.effective_user.id != ADMIN_ID:
            await query.edit_message_text("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot n√†y.")
            return
        user_id = int(query.data.split('_')[-1])
        await query.edit_message_text(text=f'Vui l√≤ng g·ª≠i s·ªë ti·ªÅn b·∫°n mu·ªën n·∫°p cho ng∆∞·ªùi d√πng {user_id} d∆∞·ªõi d·∫°ng tin nh·∫Øn:')
        context.user_data['waiting_for_balance'] = True
        context.user_data['target_user_id'] = user_id


# ================== BUFF & PAYMENT ==================
async def buff(update: Update, context: ContextTypes.DEFAULT_TYPE, object_id: str, quantity: int):
    message = update.message or (update.callback_query.message if update.callback_query else None)
    if not message:
        return
    service_id = context.user_data.get('service_id')
    if not service_id:
        await message.reply_text("L·ªói: ID d·ªãch v·ª• kh√¥ng h·ª£p l·ªá.")
        return

    status, result = chaysub.create_order(service_id, object_id, quantity)
    if status == 200:
        order_id = result.get("order", "N/A") if isinstance(result, dict) else "N/A"
        await message.reply_text(f"‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng! M√£ ƒë∆°n h√†ng: {order_id}")
    else:
        error_message = result.get("message", "Kh√¥ng x√°c ƒë·ªãnh") if isinstance(result, dict) else "Kh√¥ng x√°c ƒë·ªãnh"
        await message.reply_text(f"‚ùå L·ªói khi t·∫°o ƒë∆°n h√†ng: {error_message}")

async def payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _guard_allow(update):
        return
    keyboard = [
        [InlineKeyboardButton("X√°c nh·∫≠n", callback_data='paid')],
        [InlineKeyboardButton("H·ªßy", callback_data='cancel')],
    ]
    service_id = context.user_data.get('service_id')
    object_id = context.user_data.get('object_id')
    quantity = context.user_data.get('quantity')
    amount = chaysub.getServicePrice(service_id)
    if not amount:
        await update.message.reply_text("L·ªói: Kh√¥ng th·ªÉ l·∫•y gi√° d·ªãch v·ª•.")
        return
    price = int(round(amount * int(quantity)))
    balance = getBalanceInfo(update.effective_user.id)
    if balance < price:
        await update.message.reply_text(
            f"S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß. S·ªë d∆∞ hi·ªán t·∫°i: {balance} VNƒê, Gi√° d·ªãch v·ª•: {price} VNƒê"
        )
        return
    context.user_data['new_balance'] = balance - price
    view_order = f"Service: {service_id}\nLink: {object_id}\nS·ªë l∆∞·ª£ng: {quantity}"
    await update.message.reply_text(
        f"X√°c nh·∫≠n {view_order}\nThanh to√°n {price} VNƒê ƒë·ªÉ ti·∫øp t·ª•c?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def payment2(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _guard_allow(update):
        return
    service_id = context.user_data.get('service_id')
    object_id = context.user_data.get('object_id')
    quantity = context.user_data.get('quantity')
    amount = chaysub.getServicePrice(service_id)
    if not amount:
        await update.message.reply_text("L·ªói: Kh√¥ng th·ªÉ l·∫•y gi√° d·ªãch v·ª•.")
        return
    price = int(round(amount * int(quantity)))
    balance = getBalanceInfo(update.effective_user.id)
    if balance < price:
        await update.message.reply_text(
            f"S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß. S·ªë d∆∞ hi·ªán t·∫°i: {balance} VNƒê, Gi√° d·ªãch v·ª•: {price} VNƒê"
        )
        return
    context.user_data['new_balance'] = balance - price
    await update.message.reply_text(f"Thanh to√°n th√†nh c√¥ng {price} VNƒê cho ƒë∆°n h√†ng:\nService: {service_id}\nLink: {object_id}\nS·ªë l∆∞·ª£ng: {quantity}")
    updateBalance(update.effective_user.id, context.user_data.get('new_balance', balance))
    await buff(update, context, object_id, int(quantity))


# ================== USER INPUT ==================
async def handle_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await _guard_allow(update):
        return

    if context.user_data.get('waiting_for_link'):
        object_ids = [ln.strip() for ln in update.message.text.strip().splitlines() if ln.strip()]
        if not object_ids:
            await update.message.reply_text("Link kh√¥ng h·ª£p l·ªá. Vui l√≤ng g·ª≠i l·∫°i danh s√°ch link TikTok h·ª£p l·ªá:")
            return
        if not all(("tiktok.com" in obj) for obj in object_ids):
            await update.message.reply_text("Link kh√¥ng h·ª£p l·ªá. Vui l√≤ng g·ª≠i l·∫°i danh s√°ch link TikTok h·ª£p l·ªá:")
            return
        context.user_data['waiting_for_link'] = False
        context.user_data['object_ids'] = object_ids
        await update.message.reply_text("Vui l√≤ng g·ª≠i s·ªë l∆∞·ª£ng b·∫°n mu·ªën buff:")
        context.user_data['waiting_for_quantity'] = True

    elif context.user_data.get('waiting_for_quantity'):
        try:
            quantity = int(update.message.text.strip())
            if quantity <= 0:
                raise ValueError("S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng.")
            object_ids = context.user_data.get('object_ids')
            if not object_ids:
                await update.message.reply_text("L·ªói: Link kh√¥ng h·ª£p l·ªá.")
                context.user_data['waiting_for_quantity'] = False
                return
            context.user_data['quantity'] = quantity
            # Thanh to√°n + t·∫°o ƒë∆°n cho t·ª´ng link
            for object_id in object_ids:
                context.user_data['object_id'] = object_id
                await payment2(update, context)
                await asyncio.sleep(5)  # delay 5 gi√¢y gi·ªØa c√°c ƒë∆°n h√†ng
            context.user_data['waiting_for_quantity'] = False
        except ValueError:
            await update.message.reply_text("S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá. Vui l√≤ng g·ª≠i l·∫°i s·ªë l∆∞·ª£ng h·ª£p l·ªá:")

    elif context.user_data.get('waiting_for_user_id'):
        try:
            new_user_id = int(update.message.text.strip())
            if new_user_id <= 0:
                raise ValueError
            if add_allowed_user(new_user_id, 0):
                await update.message.reply_text(f"‚úÖ ƒê√£ th√™m ng∆∞·ªùi d√πng v·ªõi ID: {new_user_id}")
            else:
                await update.message.reply_text(f"‚ö†Ô∏è Ng∆∞·ªùi d√πng v·ªõi ID: {new_user_id} ƒë√£ t·ªìn t·∫°i.")
            context.user_data['waiting_for_user_id'] = False
        except ValueError:
            await update.message.reply_text("ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá. Vui l√≤ng g·ª≠i l·∫°i ID h·ª£p l·ªá:")

    elif context.user_data.get('waiting_for_balance'):
        try:
            amount = int(update.message.text.strip())
            if amount <= 0:
                raise ValueError
            target_user_id = context.user_data.get('target_user_id')
            if not target_user_id:
                await update.message.reply_text("L·ªói: ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá.")
                context.user_data['waiting_for_balance'] = False
                return
            # ki·ªÉm tra s·ªë d∆∞ bot tr∆∞·ªõc khi n·∫°p
            status, result = chaysub.getBalance()
            bot_balance = int(result.get("balance", 0)) if isinstance(result, dict) else 0
            if bot_balance < amount:
                await update.message.reply_text(
                    f"S·ªë d∆∞ c·ªßa bot kh√¥ng ƒë·ªß ƒë·ªÉ n·∫°p s·ªë ti·ªÅn n√†y.\nS·ªë d∆∞ hi·ªán t·∫°i c·ªßa bot: {bot_balance} VNƒê"
                )
                context.user_data['waiting_for_balance'] = False
                return
            if addBalance(target_user_id, amount):
                await update.message.reply_text(f"‚úÖ ƒê√£ n·∫°p {amount} VNƒê cho ng∆∞·ªùi d√πng ID: {target_user_id}")
            else:
                await update.message.reply_text(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi ID: {target_user_id}.")
            context.user_data['waiting_for_balance'] = False
        except ValueError:
            await update.message.reply_text("S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. Vui l√≤ng g·ª≠i l·∫°i s·ªë ti·ªÅn h·ª£p l·ªá:")

    else:
        await update.message.reply_text("Vui l√≤ng nh·∫•n /start ƒë·ªÉ b·∫Øt ƒë·∫ßu.")


# ================== ERROR HANDLER ==================
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logging.exception("Exception while handling an update", exc_info=context.error)
    try:
        if update and hasattr(update, "effective_message") and update.effective_message:
            await update.effective_message.reply_text("‚ùå C√≥ l·ªói x·∫£y ra. M√¨nh ƒë√£ ghi log ƒë·ªÉ ki·ªÉm tra.")
    except Exception:
        pass


# ================== MAIN ==================
def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin))
    app.add_handler(CommandHandler("getid", getId))
    app.add_handler(CommandHandler("getservice", getService))

    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_input))

    app.add_error_handler(on_error)
    # Long-polling (Render ‚Üí n√™n ch·∫°y ki·ªÉu Worker). N·∫øu b·∫°n d√πng Web Service, h√£y chuy·ªÉn qua webhook.
    app.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
